[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed. version GNU Lesser General Public License incorporates terms conditions version 3 GNU General Public License, supplemented additional permissions listed .","code":""},{"path":"/LICENSE.html","id":"id_0-additional-definitions","dir":"","previous_headings":"","what":"0. Additional Definitions","title":"GNU Lesser General Public License","text":"used herein, “License” refers version 3 GNU Lesser General Public License, “GNU GPL” refers version 3 GNU General Public License. “Library” refers covered work governed License, Application Combined Work defined . “Application” work makes use interface provided Library, otherwise based Library. Defining subclass class defined Library deemed mode using interface provided Library. “Combined Work” work produced combining linking Application Library. particular version Library Combined Work made also called “Linked Version”. “Minimal Corresponding Source” Combined Work means Corresponding Source Combined Work, excluding source code portions Combined Work , considered isolation, based Application, Linked Version. “Corresponding Application Code” Combined Work means object code /source code Application, including data utility programs needed reproducing Combined Work Application, excluding System Libraries Combined Work.","code":""},{"path":"/LICENSE.html","id":"id_1-exception-to-section-3-of-the-gnu-gpl","dir":"","previous_headings":"","what":"1. Exception to Section 3 of the GNU GPL","title":"GNU Lesser General Public License","text":"may convey covered work sections 3 4 License without bound section 3 GNU GPL.","code":""},{"path":"/LICENSE.html","id":"id_2-conveying-modified-versions","dir":"","previous_headings":"","what":"2. Conveying Modified Versions","title":"GNU Lesser General Public License","text":"modify copy Library, , modifications, facility refers function data supplied Application uses facility (argument passed facility invoked), may convey copy modified version: ) License, provided make good faith effort ensure , event Application supply function data, facility still operates, performs whatever part purpose remains meaningful, b) GNU GPL, none additional permissions License applicable copy.","code":""},{"path":"/LICENSE.html","id":"id_3-object-code-incorporating-material-from-library-header-files","dir":"","previous_headings":"","what":"3. Object Code Incorporating Material from Library Header Files","title":"GNU Lesser General Public License","text":"object code form Application may incorporate material header file part Library. may convey object code terms choice, provided , incorporated material limited numerical parameters, data structure layouts accessors, small macros, inline functions templates (ten fewer lines length), following: ) Give prominent notice copy object code Library used Library use covered License. b) Accompany object code copy GNU GPL license document.","code":""},{"path":"/LICENSE.html","id":"id_4-combined-works","dir":"","previous_headings":"","what":"4. Combined Works","title":"GNU Lesser General Public License","text":"may convey Combined Work terms choice , taken together, effectively restrict modification portions Library contained Combined Work reverse engineering debugging modifications, also following: ) Give prominent notice copy Combined Work Library used Library use covered License. b) Accompany Combined Work copy GNU GPL license document. c) Combined Work displays copyright notices execution, include copyright notice Library among notices, well reference directing user copies GNU GPL license document. d) one following: 0) Convey Minimal Corresponding Source terms License, Corresponding Application Code form suitable , terms permit, user recombine relink Application modified version Linked Version produce modified Combined Work, manner specified section 6 GNU GPL conveying Corresponding Source. 1) Use suitable shared library mechanism linking Library. suitable mechanism one () uses run time copy Library already present user’s computer system, (b) operate properly modified version Library interface-compatible Linked Version. e) Provide Installation Information, otherwise required provide information section 6 GNU GPL, extent information necessary install execute modified version Combined Work produced recombining relinking Application modified version Linked Version. (use option 4d0, Installation Information must accompany Minimal Corresponding Source Corresponding Application Code. use option 4d1, must provide Installation Information manner specified section 6 GNU GPL conveying Corresponding Source.)","code":""},{"path":"/LICENSE.html","id":"id_5-combined-libraries","dir":"","previous_headings":"","what":"5. Combined Libraries","title":"GNU Lesser General Public License","text":"may place library facilities work based Library side side single library together library facilities Applications covered License, convey combined library terms choice, following: ) Accompany combined library copy work based Library, uncombined library facilities, conveyed terms License. b) Give prominent notice combined library part work based Library, explaining find accompanying uncombined form work.","code":""},{"path":"/LICENSE.html","id":"id_6-revised-versions-of-the-gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"6. Revised Versions of the GNU Lesser General Public License","title":"GNU Lesser General Public License","text":"Free Software Foundation may publish revised /new versions GNU Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library received specifies certain numbered version GNU Lesser General Public License “later version” applies , option following terms conditions either published version later version published Free Software Foundation. Library received specify version number GNU Lesser General Public License, may choose version GNU Lesser General Public License ever published Free Software Foundation. Library received specifies proxy can decide whether future versions GNU Lesser General Public License shall apply, proxy’s public statement acceptance version permanent authorization choose version Library.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"why-use-neighborfinder","dir":"Articles","previous_headings":"","what":"Why use NeighborFinder?","title":"Technical Report","text":"NeighborFinder helps find direct neighbors certain object interest (bacterial species, functional module, etc). Applying NeighborFinder multiple datasets makes predictions robust. Identified neighbors can thus used design microbial communities, probiotics live biotherapeutic products (LBP). NeighborFinder can also help identify specific ecological niches linked particular diseases.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"how-to-use-it","dir":"Articles","previous_headings":"","what":"How to use it?","title":"Technical Report","text":"Install package cf. README Apply abundance tables metagenomic data gathering least 100 samples better performance. See vignette included package. reviews main functions useful making NeighborFinder’s features.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"input-dataframe-format","dir":"Articles","previous_headings":"","what":"Input dataframe format","title":"Technical Report","text":"required data format input follows: module IDs rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample. “X” numeric value corresponding abundance provided either count metagenomic abundance. example modules name species name module ID MSP_name.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"what-is-behind-apply_neighborfinder","dir":"Articles","previous_headings":"","what":"What is behind apply_NeighborFinder() ?","title":"Technical Report","text":"description function works.","code":""},{"path":[]},{"path":"/articles/NeighborFinder_technical_report.html","id":"a-prevalence-filter-shotgun-pre-treatment","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 1) Pre-processing: Counts & Normalization","what":"a) Prevalence filter & shotgun pre-treatment","title":"Technical Report","text":"first step apply_NeighborFinder() filter input abundance data, provided format, using parameter prev_level. step helps simplify dataset filtering rare species. transformation abundance data count table consists first transposing data (samples rows module IDs columns). , abundances transformed counts using get_count_table() extracted OneNet package. done dividing values smallest positive abundance rounding results, minimum count 1. Bij=⌊Aij/Amin⌋B_{ij} = \\lfloor A_{ij}/A_{min}\\rfloor Amin=min{,j:Aij≠0}AijA_{\\text{min}} = \\min_{\\{,j : A_{ij} \\neq 0\\}} A_{ij} AA abundance table BB resulting count table. Note rows AA (BB) samples ∈{1,...,n}\\\\{1,...,n\\} columns module IDs j∈{1,...,p}j \\\\{1,...,p\\}.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"b-normalization","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 1) Pre-processing: Counts & Normalization","what":"b) Normalization","title":"Technical Report","text":"next step consists applying mclr normalization previously transformed abundance data. equation corresponding mclr transformation: Cj=mclrϵ(Bj)C_j = {mclr}_\\epsilon   (B_j) BB count table CC resulting normalized count table. Unlike clr normalization, mclr preserves zeros dataset. function mclrϵ{mclr}_\\epsilon defined follows. Consider vector x∈R+px\\R_+^p compositions, without loss generality, assume ﬁrst qq elements xx zero, elements positive. mclrϵ(x){mclr}_\\epsilon(x) defined : y=mclrϵ(x)=[0,...,0,log{xq+1/g(x)}+ϵ,...,log{xj/g(x)}+ϵ,...,log{xp/g(x)}+ϵ]y= {mclr}_\\epsilon(x)  = [0,...,0,\\log\\{{x_{q+1}/g(x)}\\}+\\epsilon  ,...,\\log\\{{x_j/g(x)}\\}+\\epsilon  ,...,\\log\\{{x_p/g(x)}\\}+\\epsilon ] g(x)=(∏j=q+1pxj)1/(p−q)g(x) = {(\\prod^{p}_{j=q+1}x_j)}^{1/(p-q)} geometric mean non-zero elements xx. mclrϵ{mclr}_\\epsilon applied abundance table BB, apply rowwise (sample BiB_i) use ϵ=∣zmin∣+1\\epsilon =∣ z_{min} ∣ + 1 zmin=minij:Bij≠0log{Bij/g(Bi)}z_{min} = {min }_{{ij:B}_{ij}\\neq 0}{ log\\{{B_{ij}/g(B_i)}}\\}.","code":""},{"path":[]},{"path":"/articles/NeighborFinder_technical_report.html","id":"a-simple-case-no-covariates","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 2) Regularized linear regressions","what":"a) Simple case: no covariates","title":"Technical Report","text":"consider linear regression problem regress abundance Cj0C_{j0} module j0j0 abundances others modules (Cj)j≠j0{(C_j)}_{j\\neq j0}. function glmnet::cv.glmnet() applied normalized data 10 times, time different seed. following model used: Cj0=θ1C1+...+θj0−1Cj0−1+θj0+1Cj0+1+...+θpCp+ϵC_{j0} = \\theta_1  C_1 +...+ \\theta_{j0-1}  C_{j0-1} + \\theta_{j0+1}  C_{j0+1} +...+ \\theta_p  C_p +\\epsilon CC normalized count table obtained end step 1) j0j0 designates column module interest CC. θj\\theta_j regression coefficient j0j0 jj, ϵ\\epsilon residual error, assumed gaussian σ2In\\sigma^2  I_n covariance. Since pp usually bigger nn want sparse vector θ\\theta, use l1l_1–regularization select small number non null coefficients θ\\theta. modules θj≠0\\theta_j \\neq 0 corresponds potential neighbors module j0j0. translates following minimization problem: argminθ(‖Cj0−Xθ‖2+λ‖θ‖1)argmin{_{\\theta}{({‖C_{j0}-X\\theta‖}^2+{\\lambda‖\\theta‖}_1)}} X=C−j0{X=C}_{-j0} design matrix composed abundances modules j0j0, λ\\lambda penalization term enforcing strength regularization thus number non null coefficients. solve problem using glmnet::glasso() use cross-validation tune parameter λ\\lambda.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"b-handling-covariates","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 2) Regularized linear regressions","what":"b) Handling covariates","title":"Technical Report","text":"Covariates can included model considering XX made two distinct components: C−j0C_{-j0} , previously defined, DD, design matrix covariates. DD metadata matrix columns considered covariates. necessary transformation: $[\\matrix{D&C_{-j0}}]$ $[\\matrix{\\alpha\\\\\\theta}]$ penalization λ\\lambda applies coefficients θi\\theta_i α\\alpha. Minimization objective function: minimizeθ,α(‖Cj0−C−j0θ−Dα‖2+λ‖θ‖1){minimize}_{\\theta ,\\alpha}  ({‖C_{j0}-C_{-j0}\\theta -D\\alpha ‖}_2+\\lambda {‖\\theta ‖}_1) practice, DD C−j0C_{-j0} concatenated single matrix used input cv.glmnet() DD constructed covariate dataframe using either () formula interface, (ii) specifying name single column used covariate. use covariates, 3 additional arguments required: covar: takes formula name column covariate metadata table. meta_df: dataframe giving metadata information. sample_col: name column metadata indicating sample names. See part “Apply NeighborFinder covariate option” vignette detailed example.","code":""},{"path":[]},{"path":"/articles/NeighborFinder_technical_report.html","id":"a-filtering-the-results","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 3) Post-processing","what":"a) Filtering the results","title":"Technical Report","text":"step enables NeighborFinder better performances naive glmnet method. seed-generated result, filter applied increase reliability detected interactions. done top_filtering parameter: consists keeping strongest coefficients. top_filtering set 10%, coefficients conserved must greater absolute value 90th quantile coefficients detected neighbors species interest.","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"b-increasing-robusteness","dir":"Articles","previous_headings":"What is behind apply_NeighborFinder() ? > 3) Post-processing","what":"b) Increasing robusteness","title":"Technical Report","text":"gain robustness, neighbors detected several times kept. function apply_NF_simple() run 10 seeds results found kept found least half seeds. process ensures robust results. step merges 10 filtered results (corresponding seed) eliminates edges detected less half results. kept interaction, median different coefficients calculated saved final output. final result edge table interactions stronger found least half 10 seed-generated results. Performance scores way better repetition approach running developed method single seed (see Figure 4).","code":""},{"path":"/articles/NeighborFinder_technical_report.html","id":"how-to-calibrate-the-parameters-values","dir":"Articles","previous_headings":"","what":"How to calibrate the parameters values ?","title":"Technical Report","text":"function apply_neighborfinder() two important parameters (prev_level top_filtering) shape output. also acknowledged dataset size usually impact generated network. performance assessment strategy therefore consisted covering range values parameters, aim providing users guidelines pick suitable combination dataset size. tested performance NeighborFinder eight shotgun metagenomic cohorts (sample sizes ranging 347 1084) detailed doi_recherhche_data_gouv. eight large cohorts, graph “cluster-like” structure generated graph_step() function. precision matrix Ω\\Omega non-null coefficients respecting graph topology produced inverted produce covariance matrix Σ{\\Sigma}. Semi-synthetic simulated datasets sizes n=100, n=250, n=500, n=1000 samples generated using gaussian copula covariance matrix Σ{\\Sigma} original count matrix produce count tables () marginal counts distributions original cohort (ii) enforcing correlation taxa encoded Σ{\\Sigma}. graph edges considered true edges (ground truth). 10 different seeds, value prev_level tested (15% 35%, increment 5%), bacterial species, cv.glmnet() function applied simulated dataset (via function cvglm_to_coeffs_by_object() NeighborFinder package). part corresponds first steps method (see Figure 2, step 1 step 2 top). results filtered procedure apply_NeighborFinder() (see Figure 2, step 2 bottom) keep filtering_top percentage coefficients, ranging 5% 30% 5% increments, 100% corresponding filtering results. final results obtained going last step method (see Figure 2 step 3) selection interactions detected least 5 10 results (corresponding seed) pre-mentioned case. Performance scores (F1) calculated comparing true edges graph detected neighbors, averaging bacterial species cohort datasets. procedure done simulated datasets size n=50, prev_level range 30% 60% increment 5%.   Based performance scores calculated simulated data, parameter pair choices (prev_level filtering_top) adjusted according size dataset user wishes use NeighborFinder. dealing large datasets, user plenty parameter combinations lead equivalent expected performance, dark green areas indicating high F1 score (>=0.9) Figure 4. One choice select low value prev_filter include many bacterial species possible choose filtering_top value ensure satisfactory optimum performance. example: n=1000, prev_level=0.15 filtering_top=30. dataset size decreases, user advised increase prev_level value maintaining high value filtering_top.  function choose_params_values() designed allow user obtain specific indication based dataset provided module interest. function works way procedure described previously: Generation graph Simulation dataset respecting dependencies taxa encoded graph, different prevalence levels Application apply_NF_simple() 10 seeds, without filtering top results (testing different percentages) Application robustness step (filtering interactions found least half seeds-generated results) Comparison computation F1 score: (filtering_top=100 robustness step) filtering & robustness steps user can decide values parameters use downstream analysis pass apply_NeighborFinder() using arguments prev_level filtering_top.","code":""},{"path":"/articles/NeighborFinder_vignette.html","id":"presentation-of-dataset-crc-example","dir":"Articles","previous_headings":"","what":"Presentation of dataset: CRC Example","title":"Use case","text":"data provided package extracted repository: Taxonomic profiles, functional profiles manually curated metadata human fecal metagenomes public projects coming colorectal cancer studies Three subgroups defined following 3 geographic areas: Japan, China Europe (gathering Italy, Austria, Germany France). focus patients colorectal cancer.","code":""},{"path":"/articles/NeighborFinder_vignette.html","id":"preview-of-the-data","dir":"Articles","previous_headings":"","what":"Preview of the data","title":"Use case","text":", object needed tutorial loaded preview displayed.","code":""},{"path":"/articles/NeighborFinder_vignette.html","id":"the-abundance-table","dir":"Articles","previous_headings":"Preview of the data","what":"1) The abundance table","title":"Use case","text":"preview abundance table data object looks like, species rows samples columns. first column taxonomic annotation species level, second one module ID, column sample.","code":"data(data) data$CRC_JPN[1:5, 1:5] %>% kable()"},{"path":"/articles/NeighborFinder_vignette.html","id":"the-metadata","dir":"Articles","previous_headings":"Preview of the data","what":"2) The metadata","title":"Use case","text":"metadata gathers characteristics (columns) sample (rows).","code":"data(metadata) metadata$CRC_JPN[1:5, 1:5] %>% kable()"},{"path":"/articles/NeighborFinder_vignette.html","id":"the-taxonomy","dir":"Articles","previous_headings":"Preview of the data","what":"3) The taxonomy","title":"Use case","text":"taxonomic file indicates msp (.e. metagenomic species) species genus annotation well catalog msp mostly found.","code":"data(taxo) taxo[1:5, ] %>% kable()"},{"path":"/articles/NeighborFinder_vignette.html","id":"the-graph","dir":"Articles","previous_headings":"Preview of the data","what":"4) The graph","title":"Use case","text":"dataframe adjacency matrix encoding graph “cluster-like” structure produced graph_step(). value 1 corresponds edge. object needed simulate semi-synthetic data.","code":"data(graphs) graphs$CRC_JPN[1:5, 1:5] %>% kable() graphs$CRC_JPN[5:10, 87:90] %>% kable()"},{"path":"/articles/NeighborFinder_vignette.html","id":"aim-of-this-use-case","dir":"Articles","previous_headings":"","what":"Aim of this use case","title":"Use case","text":"example, focusing Escherichia coli one bacterium associated colorectal cancer (CRC). article mentionning . E. coli strains can produce colibactin, toxin inducing DNA damage may lead colorectal cancer. goal explore ecosystem around E. coli identifying direct neighbors patients colorectal cancer.","code":""},{"path":"/articles/NeighborFinder_vignette.html","id":"test-if-the-default-parameters-of-neighborfinder-are-suitable-for-your-species-of-interest-dataset","dir":"Articles","previous_headings":"","what":"Test if the default parameters of NeighborFinder are suitable for your species of interest & dataset","title":"Use case","text":"function enables one test NeighborFinder method different parameter values thanks simulated data based provided dataset. different performance scores depending species interest dataset provided. step, generating graph needed. recommended save make next steps quicker. step commented since takes minutes execute also included ‘graphs’ object. NeighborFinder uses default level prevalence 30% filtering top 20%. results table rendered choose_params_values() indicate better performance scores values parameters, user can adjust prev_level filtering_top parameters function apply_NeighborFinder(). displayed table indicates F1 scores (harmonic mean precision recall) applying NeighborFinder method, prev_level filtering_top parameters tested. example, one combinations enabling satisfying performance prev_level=0.30 filtering_top=30. Note step optional, summary expected performance scores (calculated 8 semi-synthetic simulated datasets) shown Fig.4 Tech report.","code":"# G <- graph_step(data_with_annotation = data$CRC_JPN_CHN_EUR, #                 col_module_id = \"msp_id\", #                 annotation_level = \"species\" #                 )  G <- graphs$CRC_JPN_CHN_EUR choose_params_values(   data_with_annotation = data$CRC_JPN,   object_of_interest = \"Escherichia coli\",   sample_size = 100,   prev_list = c(0.20, 0.25, 0.30),   filtering_list = c(10, 20, 30),   graph_file = graphs$CRC_JPN,   col_module_id = \"msp_id\",   annotation_level = \"species\" ) %>%   dplyr::mutate(filtering_top = as.numeric(filtering_top)) %>%   as.data.frame() %>%   kable() #> Defining and saving true neighbors... #> Calculating scores..."},{"path":"/articles/NeighborFinder_vignette.html","id":"apply-neighborfinder-look-for-escherichia-coli-neighbors-in-crc-patients","dir":"Articles","previous_headings":"","what":"Apply NeighborFinder & look for Escherichia coli neighbors in CRC patients","title":"Use case","text":"Running apply_NeighborFinder() renders dataframe gathering neighbors species interest. required data format input follows: species rows samples columns. first column must species name, second msps name, subsequent column sample (see abundance table preview).","code":"# JAPAN res_CRC_JPN <- apply_NeighborFinder(   data_with_annotation = data$CRC_JPN,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   prev_level = 0.30,   filtering_top = 30 ) res_CRC_JPN %>% kable()"},{"path":"/articles/NeighborFinder_vignette.html","id":"visualize-the-corresponding-network","dir":"Articles","previous_headings":"","what":"Visualize the corresponding network","title":"Use case","text":"visualization NeighborFinder results. possible adjust size nodes labels. One can also define color nodes corresponding species interest. taxo_option generates network species names instead msps ones.","code":"visualize_network(   res_CRC_JPN,   taxo,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   label_size = 5 ) visualize_network(   res_CRC_JPN,   taxo,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   label_size = 5,   annotation_option = TRUE,   seed = 2 )"},{"path":"/articles/NeighborFinder_vignette.html","id":"apply-neighborfinder-with-covariate-option","dir":"Articles","previous_headings":"","what":"Apply NeighborFinder with covariate option","title":"Use case","text":"Including covariates makes possible correct effect external factors (e.g. sequencing technology used generate data, extraction method) can introduce bias variability observations. allows model better distinguish part true structure network simply due technical contextual differences. example applying method, giving covariate: case, name study. include covariate, function run following 3 arguments given: covar: takes formula name column covariate metadata table. Note “study_accession” equivalent ~study_accession. meta_df: dataframe giving metadata information. sample_col: name column metadata indicating sample names, consistent colnames “data_with_taxo”.","code":"# On CRC patients # CHINA res_CRC_CHN <- apply_NeighborFinder(   data$CRC_CHN,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   prev_level = 0.30,   filtering_top = 30,   covar = ~study_accession,   meta_df = metadata$CRC_CHN,   sample_col = \"secondary_sample_accession\" )  # EUROPE res_CRC_EUR <- apply_NeighborFinder(   data$CRC_EUR,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   prev_level = 0.30,   filtering_top = 30,   covar = ~study_accession,   meta_df = metadata$CRC_EUR,   sample_col = \"secondary_sample_accession\" ) visualize_network(   res_CRC_CHN,   taxo,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   label_size = 5 ) visualize_network(   res_CRC_EUR,   taxo,   object_of_interest = \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   label_size = 5 )"},{"path":"/articles/NeighborFinder_vignette.html","id":"look-at-the-intersection-of-neighbors-found-in-the-3-subgroups","dir":"Articles","previous_headings":"","what":"Look at the intersection of neighbors found in the 3 subgroups","title":"Use case","text":"example merge results several datasets single network. operation can performed 2 datasets. One can choose visualization threshold, corresponding minimum number datasets neighbors found.  Another function used equivalent network thanks summary table, indicating datasets intersections found set threshold. One resulting neighbors Klebsiella pneumoniae. also described article bacterium associated CRC, producing toxin. article summarized prevalence pks positive E. coli K. pneumoniae CRC patient samples. pks stands polyketide synthase, K. pneumoniae genes can synthetize bacterial toxin colibactin. “seems pks positive bacteria can induce mutation CRC driver genes , therefore, pks may become marker CRC carcinogenesis therapy.” (N. Strakova, K. Korena, R Karpiskova, 2021)","code":"intersections_network(   res_list = list(res_CRC_JPN, res_CRC_CHN, res_CRC_EUR),   taxo,   threshold = 2,   \"Escherichia coli\",   col_module_id = \"msp_id\",   annotation_level = \"species\",   label_size = 7,   edge_label_size = 4,   node_size = 15,   annotation_option = TRUE,   seed = 3 ) intersections_table(   res_list = list(res_CRC_JPN, res_CRC_CHN, res_CRC_EUR),   threshold = 2,   taxo,   col_module_id = \"msp_id\",   annotation_level = \"species\",   \"Escherichia coli\" ) %>% kable()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mathilde Sola. Author, maintainer. Mahendra Mariadassou. Author. Magali Berland. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sola M, Mariadassou M, Berland M (2025). neighborfinder: Find Neighbor Species Bacteria Interest Human Gut Microbiota. R package version 1.0.0.","code":"@Manual{,   title = {neighborfinder: Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota},   author = {Mathilde Sola and Mahendra Mariadassou and Magali Berland},   year = {2025},   note = {R package version 1.0.0}, }"},{"path":"/index.html","id":"neighborfinder","dir":"","previous_headings":"","what":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","title":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","text":"NeighborFinder R package enabling identification local neighborhood species interest, based microbiome data. Using cross-validated multiple linear regression ℓ1 penalty microbiome-specific filters, approach infers interpretable species-centered interactions, F1 score ≥ 0.95 simulated datasets ranging 250 1000 samples. several abundance tables metagenomic data, NeighborFinder suggests shortlist companion species based integration results. visualization via network proposed. NeighborFinder tailored microbiome data. specifically developed shotgun metagenomic data includes default normalization step datasets, can accommodate metabarcoding data (count-based inputs) skipping .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","text":"can install latest NeighborFinder version public github repo Note R package depends versions >= 3.5.0 recently tested R 4.4.1.","code":"if (!requireNamespace('remotes')) {  install.packages(\"remotes\")  } remotes::install_github('metagenopolis/NeighborFinder')"},{"path":"/index.html","id":"input","dir":"","previous_headings":"","what":"Input","title":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","text":"main input apply_neighborfinder() abundance table species rows samples columns. details, see section “Input dataframe format” Tech report. illustrated example, please refer vignette.","code":""},{"path":"/index.html","id":"output","dir":"","previous_headings":"","what":"Output","title":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","text":"output edge table tibble format, .e. table 3 columns: node1, node2, coef. table gathers potential neighbors species interest found apply_neighborfinder(). output, network can created visualize_network().","code":""},{"path":"/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"Find Neighbor Species of a Bacteria of Interest in the Human Gut Microbiota","text":"vignette provides overview various use cases NeighborFinder examples based real data extracted repository.","code":""},{"path":"/reference/apply_NF_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","title":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","text":"Apply NeighborFinder simplest version raw data","code":""},{"path":"/reference/apply_NF_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","text":"","code":"apply_NF_simple(   data_with_annotation,   object_of_interest,   col_module_id,   annotation_level,   prev_level = 0.3,   filtering_top = 20,   seed = NULL,   ... )"},{"path":"/reference/apply_NF_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample object_of_interest String. name bacteria species interest key word functional module definition col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 prev_level Numeric. prevalence studied. Required format decimal: 0.20 20% prevalence filtering_top Numeric. filtering top percentage studied. Required format : 10 top 10% seed Numeric. seed number, ensuring reproducibility ... Additional arguments passed cvglm_to_coeffs_by_object()","code":""},{"path":"/reference/apply_NF_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","text":"Dataframe. Returns results using NeighborFinder(): module ID 'object_of_interest', names neighbors corresponding coefficients calculated cv.glmnet()","code":""},{"path":"/reference/apply_NF_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply NeighborFinder simplest version on raw data — apply_NF_simple","text":"","code":"data(data) res_CRC_JPN <- apply_NF_simple(data$CRC_JPN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", seed = 20242025)"},{"path":"/reference/apply_NeighborFinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply NeighborFinder on raw data — apply_NeighborFinder","title":"Apply NeighborFinder on raw data — apply_NeighborFinder","text":"Apply NeighborFinder raw data","code":""},{"path":"/reference/apply_NeighborFinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply NeighborFinder on raw data — apply_NeighborFinder","text":"","code":"apply_NeighborFinder(   data_with_annotation,   object_of_interest,   col_module_id,   annotation_level,   prev_level = 0.3,   filtering_top = 20,   ... )"},{"path":"/reference/apply_NeighborFinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply NeighborFinder on raw data — apply_NeighborFinder","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample object_of_interest String. name bacteria species interest key word functional module definition col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 prev_level Numeric. prevalence studied. Required format decimal: 0.20 20% prevalence filtering_top Numeric. filtering top percentage studied. Required format : 10 top 10% ... Additional arguments passed apply_NF_simple()","code":""},{"path":"/reference/apply_NeighborFinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply NeighborFinder on raw data — apply_NeighborFinder","text":"Dataframe. Returns results using NeighborFinder(): module ID 'object_of_interest', names neighbors corresponding coefficients calculated cv.glmnet()","code":""},{"path":"/reference/apply_NeighborFinder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply NeighborFinder on raw data — apply_NeighborFinder","text":"","code":"data(data) res_CRC_JPN <- apply_NeighborFinder(data$CRC_JPN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\")"},{"path":"/reference/choose_params_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","title":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","text":"Render table give indication values choose prevalence level top filtering percentage","code":""},{"path":"/reference/choose_params_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","text":"","code":"choose_params_values(   data_with_annotation,   object_of_interest,   sample_size,   prev_list = c(0.2, 0.3, 0.4),   filtering_list = c(10, 20, 30),   graph_file = NULL,   col_module_id,   annotation_level )"},{"path":"/reference/choose_params_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample object_of_interest String. name bacteria species interest key word functional module definition sample_size Numeric. Number samples dataset. prev_list List numeric. prevalences studied. Required format decimal: 0.20 20% prevalence filtering_list List numeric. filtering top percentages studied. Required format : 10 top 10% graph_file Dataframe. object generated graph_step() function col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1","code":""},{"path":"/reference/choose_params_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","text":"Dataframe. Returns F1 rates using NeighborFinder()","code":""},{"path":"/reference/choose_params_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a table to give an indication of the values to choose for the prevalence level and the top filtering percentage — choose_params_values","text":"","code":"data(data) data(graphs) choose_params_values(data_with_annotation = data$CRC_JPN, object_of_interest = \"Escherichia coli\", sample_size = 100, prev_list = c(0.20, 0.30), filtering_list = c(10, 20), graph_file = graphs$CRC_JPN, col_module_id = \"msp_id\", annotation_level = \"species\") #> Defining and saving true neighbors... #> Calculating scores... #>   prev_level filtering_top F1_before F1_after #> 1        0.2            10    0.0120     0.00 #> 2        0.2            20    0.0120     0.67 #> 3        0.3            10    0.0058     0.67 #> 4        0.3            20    0.0058     1.00"},{"path":"/reference/compute_precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute precision rate — compute_precision","title":"Compute precision rate — compute_precision","text":"Compute precision rate","code":""},{"path":"/reference/compute_precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute precision rate — compute_precision","text":"","code":"compute_precision(true, detected)"},{"path":"/reference/compute_precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute precision rate — compute_precision","text":"true List. one true neighbors detected List. one detected neighbors","code":""},{"path":"/reference/compute_precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute precision rate — compute_precision","text":"Numeric. Returns precision rate","code":""},{"path":"/reference/compute_precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute precision rate — compute_precision","text":"","code":"compute_precision(c(\"a\"), c(\"a\", \"b\", \"c\")) #> [1] 0.3333333 compute_precision(c(\"a\", \"b\"), c(\"a\", \"c\")) #> [1] 0.5"},{"path":"/reference/compute_recall.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute recall rate — compute_recall","title":"Compute recall rate — compute_recall","text":"Compute recall rate","code":""},{"path":"/reference/compute_recall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute recall rate — compute_recall","text":"","code":"compute_recall(true, detected)"},{"path":"/reference/compute_recall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute recall rate — compute_recall","text":"true List. one true neighbors detected List. one detected neighbors","code":""},{"path":"/reference/compute_recall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute recall rate — compute_recall","text":"Numeric. Returns recall rate","code":""},{"path":"/reference/compute_recall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute recall rate — compute_recall","text":"","code":"compute_recall(c(\"a\"), c(\"a\", \"b\", \"c\")) #> [1] 1 compute_recall(c(\"a\", \"b\"), c(\"a\", \"c\")) #> [1] 0.5"},{"path":"/reference/cvglm_to_coeffs_by_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","title":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","text":"Apply cv.glmnet() list module IDs prevalence level","code":""},{"path":"/reference/cvglm_to_coeffs_by_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","text":"","code":"cvglm_to_coeffs_by_object(   list_dfs,   test_module = identify_module(),   seed = NULL,   ... )"},{"path":"/reference/cvglm_to_coeffs_by_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","text":"list_dfs List dataframe. normalized dataframe test_module List string. module IDs seed Numeric. seed number, ensuring reproducibility ... Additional arguments passed find_all_module_neighbors()","code":""},{"path":"/reference/cvglm_to_coeffs_by_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","text":"Dataframe. Returns module ID, detected neighbor corresponding coefficient","code":""},{"path":"/reference/cvglm_to_coeffs_by_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply cv.glmnet() for a list of module IDs and for each prevalence level — cvglm_to_coeffs_by_object","text":"","code":"data(data) data(metadata) # Simple example normed_JPN <- norm_data(data$CRC_JPN, col_module_id = \"msp_id\", annotation_level = \"species\", prev_list = c(0.20, 0.25, 0.30)) neighbors_JPN <- cvglm_to_coeffs_by_object(list_dfs = normed_JPN, test_module = c(\"msp_0030\", \"msp_0345\"), seed = 20242025) # Example with covariate normed_CHN <- norm_data(data$CRC_CHN, col_module_id = \"msp_id\", annotation_level = \"species\", prev_list = c(0.20, 0.25, 0.30)) neighbors_CHN <- cvglm_to_coeffs_by_object(list_dfs = normed_CHN, test_module = c(\"msp_0030\", \"msp_0345\"), seed = 20242025, covar = ~study_accession, meta_df = metadata$CRC_CHN, sample_col = \"secondary_sample_accession\")"},{"path":"/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"data — data","title":"data — data","text":"#' @format list dataframes corresponding abundance tables merges taxonomic information. CRC_JPN dataframe Japanese patients diagnosed colorectal cancer CRC_CHN dataframe Chinese patients diagnosed colorectal cancer CRC_EUR dataframe European patients diagnosed colorectal cancer CRC_JPN_CHN_EUR dataframe patients diagnosed colorectal cancer 3 previous countries","code":""},{"path":"/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data — data","text":"","code":"data"},{"path":"/reference/data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data — data","text":"object class list length 4.","code":""},{"path":"/reference/data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"data — data","text":"https://entrepot.recherche.data.gouv.fr/dataset.xhtml?persistentId=doi:10.57745/7IVO3E","code":""},{"path":"/reference/final_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","title":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","text":"Gather lists neighbors true ones graph detected ones cv.glmnet()","code":""},{"path":"/reference/final_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","text":"","code":"final_step(df_truth, df_glm, robustness_step = NULL)"},{"path":"/reference/final_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","text":"df_truth Dataframe. one resulting truth_by_prevalence() df_glm Dataframe. one resulting cvglm_to_coeffs_by_object() robustness_step Boolean. TRUE, filtering_top different 100%, FALSE reults naïve method looked ","code":""},{"path":"/reference/final_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","text":"Dataframe. Returns level prevalence module ID, list true /detected neighbors corresponding list coefficients","code":""},{"path":"/reference/final_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather lists of neighbors of true ones from the graph and detected ones from cv.glmnet() — final_step","text":"","code":"# Dataframe with true neighbors df_true <- list(   tibble::tibble(     node1 = c(\"msp_1\", \"msp_1\", \"msp_2\", \"msp_3\"), node2 = c(\"msp_55\", \"msp_20\", \"msp_3\", \"msp_18\"),     prev1 = c(0.28, 0.28, 0.96, 0.75), prev2 = c(0.76, 0.25, 0.75, 0.60)   ),   tibble::tibble(node1 = c(\"msp_2\", \"msp_3\"), node2 = c(\"msp_3\", \"msp_18\"), prev1 = c(0.96, 0.75), prev2 = c(0.75, 0.60)) ) %>% rlang::set_names(c(\"0.20\", \"0.30\"))  # Dataframe with detected neighbors df_detected <- list(   tibble::tibble(     prev_level = c(\"0.20\", \"0.30\", \"0.30\", \"0.30\"), node1 = c(\"msp_2\", \"msp_2\", \"msp_3\", \"msp_3\"),     node2 = c(\"msp_3\", \"msp_3\", \"msp_18\", \"msp_8\"), coef = c(0.406, -0.025, 0.160, 0.005),     filtering_top = c(100, 100, 100, 100)   ),   tibble::tibble() ) %>% rlang::set_names(c(\"0.20\", \"0.30\")) # Use final_step() to gather both neighbors <- final_step(df_true, df_detected, robustness_step = FALSE)"},{"path":"/reference/find_all_module_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","title":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","text":"Apply cv.glmnet() list module IDs","code":""},{"path":"/reference/find_all_module_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","text":"","code":"find_all_module_neighbors(df, test_module, seed = NULL, ...)"},{"path":"/reference/find_all_module_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","text":"df Dataframe. normalized dataframe test_module List string. module IDs seed Numeric. seed number, ensuring reproducibility ... Additional arguments passed find_module_neighbors()","code":""},{"path":"/reference/find_all_module_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","text":"Dataframe. Returns module ID, detected neighbor corresponding coefficient","code":""},{"path":"/reference/find_all_module_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply cv.glmnet() for a list of module IDs — find_all_module_neighbors","text":"","code":"data(data) data(metadata) # Simple example x <- norm_data(data$CRC_JPN, 0.30, annotation_level = \"species\")[[1]] neighbors_JPN <- find_all_module_neighbors(df = x, test_module = c(\"msp_0030\", \"msp_0345\"), seed = 20242025) # Example with covariate x <- norm_data(data$CRC_CHN, 0.30, annotation_level = \"species\")[[1]] neighbors_CHN <- find_all_module_neighbors(df = x, test_module = c(\"msp_0030\", \"msp_0345\"), seed = 20242025, covar = ~study_accession, meta_df = metadata$CRC_CHN, sample_col = \"secondary_sample_accession\")"},{"path":"/reference/find_module_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","title":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","text":"Apply cv.glmnet() given mmodule ID","code":""},{"path":"/reference/find_module_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","text":"","code":"find_module_neighbors(   df,   module,   seed = NULL,   covar = NULL,   meta_df = NULL,   sample_col = NULL )"},{"path":"/reference/find_module_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","text":"df Dataframe. normalized dataframe module String. module ID name seed Numeric. seed number, ensuring reproducibility covar String formula. Formula name column covariate metadata table. Note \"study_accession\" equivalent ~study_accession meta_df Dataframe. dataframe giving metadata information sample_col String. name column metadata indicating sample names, consistent colnames 'df'","code":""},{"path":"/reference/find_module_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","text":"Dataframe. Returns module ID, detected neighbor corresponding coefficient","code":""},{"path":"/reference/find_module_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply cv.glmnet() for a given mmodule ID — find_module_neighbors","text":"","code":"data(data) data(metadata) # Simple example x <- norm_data(data$CRC_JPN, 0.30)[[1]] neighbors_JPN <- find_module_neighbors(df = x, module = \"msp_0030\", seed = 20242025) # Example with covariate x <- norm_data(data$CRC_CHN, 0.30)[[1]] neighbors_CHN <- find_module_neighbors(df = x, module = \"msp_0030\", seed = 20242025, covar = ~study_accession, meta_df = metadata$CRC_CHN, sample_col = \"secondary_sample_accession\")"},{"path":"/reference/get_count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","title":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","text":"Conversion count table function prevalence filter (Extracted OneNet package)","code":""},{"path":"/reference/get_count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","text":"","code":"get_count_table(   abund.path = NULL,   abund.table = NULL,   sample.id = NULL,   prev.min,   verbatim = TRUE,   msp = NULL )"},{"path":"/reference/get_count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","text":"abund.path String. Path abundance table abund.table Dataframe. Abundance table, bacterial species names first column sample.id String vector. IDs samples keep final table prev.min Numeric. value 0 1 corresponds minimal prevalence threshold bacterial species keep final table verbatim Boolean. Controls verbosity msp String vector. indicates bacterial species names, specified abundance table first column","code":""},{"path":"/reference/get_count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","text":"list containing data: final count table (tibble) prevalences: tibble gathering prevalence bacterial species","code":""},{"path":"/reference/get_count_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to count table function with prevalence filter (Extracted from OneNet package) — get_count_table","text":"","code":"tiny_data <- data.frame(   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) ) # Applying a prevalence filter of 30% on the new count_table count_table <- get_count_table(abund.table = tiny_data, sample.id = colnames(tiny_data), prev.min = 0.3) #> Preprocessing step output for species prevalence>30% :  #>    -from 4 to 3 species #>    -from 50% to 41.7% zero values."},{"path":"/reference/graph_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a graph with a ","title":"Generate a graph with a ","text":"Generate graph \"cluster-like\" structure, needed simulation purposes","code":""},{"path":"/reference/graph_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a graph with a ","text":"","code":"graph_step(   data_with_annotation,   col_module_id,   annotation_level,   seed = 10010,   data_type = \"shotgun\" )"},{"path":"/reference/graph_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a graph with a ","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample col_module_id String. name column module names annotation table annotation_level String. name column level studied. Examples: species, genus, level_1 seed Numeric. Seed number data generation (new_synth_data) data_type String. Enables treatment 16S data \"16S\", default value \"shotgun\"","code":""},{"path":"/reference/graph_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a graph with a ","text":"Dataframe. dataframe composed 0 1 corresponding existence edges graph.","code":""},{"path":"/reference/graph_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a graph with a ","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) )  tiny_graph <- graph_step(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", seed = 20242025) %>% suppressWarnings()"},{"path":"/reference/graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"graphs — graphs","title":"graphs — graphs","text":"graphs","code":""},{"path":"/reference/graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graphs — graphs","text":"","code":"graphs"},{"path":"/reference/graphs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"graphs — graphs","text":"list dataframes corresponding graphs based synthetic data. CRC_JPN graph corresponding data Japanese patients diagnosed colorectal cancer CRC_JPN_CHN_EUR graph corresponding data gathering Japanese, Chinese European patients diagnosed colorectal cancer","code":""},{"path":"/reference/identify_module.html","id":null,"dir":"Reference","previous_headings":"","what":"List the modules corresponding to a given object of interest — identify_module","title":"List the modules corresponding to a given object of interest — identify_module","text":"List modules corresponding given object interest","code":""},{"path":"/reference/identify_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the modules corresponding to a given object of interest — identify_module","text":"","code":"identify_module(   object_of_interest,   annotation_table,   col_module_id,   annotation_level = \"species\" )"},{"path":"/reference/identify_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the modules corresponding to a given object of interest — identify_module","text":"object_of_interest String. name bacteria species interest key word functional module definition annotation_table Dataframe. dataframe gathering taxonomic functional module correspondence information col_module_id String. name column module names annotation table annotation_level String. name column level studied. Examples: species, genus, level_1. Default value set species level","code":""},{"path":"/reference/identify_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the modules corresponding to a given object of interest — identify_module","text":"List string. module names corresponding object interest","code":""},{"path":"/reference/identify_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the modules corresponding to a given object of interest — identify_module","text":"","code":"df_taxo <- data.frame(   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   genus = c(\"One\", \"One\", \"One\", \"Two\"),   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\") ) identify_module(object_of_interest = \"bacterium\", annotation_table = df_taxo, col_module_id = \"msp_name\", annotation_level = \"species\") #> [1] \"msp_2\" \"msp_3\" identify_module(object_of_interest = \"One\", annotation_table = df_taxo, col_module_id = \"msp_name\", annotation_level = \"species\") #> [1] \"msp_1\" \"msp_2\" \"msp_3\""},{"path":"/reference/intersections_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the intersection network from 2 or more datasets — intersections_network","title":"Display the intersection network from 2 or more datasets — intersections_network","text":"Display intersection network 2 datasets","code":""},{"path":"/reference/intersections_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the intersection network from 2 or more datasets — intersections_network","text":"","code":"intersections_network(   res_list,   threshold,   annotation_table,   col_module_id,   annotation_level,   object_of_interest,   annotation_option = FALSE,   node_size = 12,   label_size = 4,   edge_label_size = 2,   object_color = \"cadetblue2\",   seed = NULL )"},{"path":"/reference/intersections_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the intersection network from 2 or more datasets — intersections_network","text":"res_list List dataframes. results apply_NeighborFinder() several datasets threshold Numeric. Integer corresponding minimum number datasets want neighbors found annotation_table Dataframe. dataframe gathering taxonomic functional module correspondence information col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 object_of_interest String. name bacteria species interest key word functional module definition annotation_option Boolean. Default value False. True: labels nodes become module names instead module IDs node_size Numeric. parameter adjust size nodes label_size Numeric. parameter adjust size labels edge_label_size Numeric. parameter adjust size edge labels object_color String. name color differentiate nodes corresponding 'object_of_interest' module IDs seed Numeric. seed number, ensuring reproducibility","code":""},{"path":"/reference/intersections_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the intersection network from 2 or more datasets — intersections_network","text":"Network. Visualization NeighborFinder results several datasets","code":""},{"path":"/reference/intersections_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the intersection network from 2 or more datasets — intersections_network","text":"","code":"data(taxo) data(data) data(metadata) res_CRC_JPN <- apply_NeighborFinder(data$CRC_JPN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\") res_CRC_CHN <- apply_NeighborFinder(data$CRC_CHN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", covar = ~study_accession, meta_df = metadata$CRC_CHN, sample_col = \"secondary_sample_accession\") res_CRC_EUR <- apply_NeighborFinder(data$CRC_EUR, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", covar = ~study_accession, meta_df = metadata$CRC_EUR, sample_col = \"secondary_sample_accession\")  intersections_network(res_list = list(res_CRC_JPN, res_CRC_CHN, res_CRC_EUR), taxo, threshold = 2, \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", label_size = 7, edge_label_size = 4, node_size = 15, annotation_option = TRUE, seed = 3)"},{"path":"/reference/intersections_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","title":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","text":"Display intersection table summarizing results 2 datasets","code":""},{"path":"/reference/intersections_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","text":"","code":"intersections_table(   res_list,   threshold,   annotation_table,   col_module_id,   annotation_level,   object_of_interest )"},{"path":"/reference/intersections_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","text":"res_list List dataframes. results apply_NeighborFinder() several datasets threshold Numeric. Integer corresponding minimum number datasets want neighbors found annotation_table Dataframe. dataframe gathering taxonomic functional module correspondence information col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 object_of_interest String. name bacteria species interest key word functional module definition","code":""},{"path":"/reference/intersections_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","text":"Dataframe. Table gathering intersection NeighborFinder results several datasets. column 'datasets' indicates datasets neighbor found, column 'intersections' indicates number datasets neighbor found","code":""},{"path":"/reference/intersections_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the intersection table summarizing the results from 2 or more datasets — intersections_table","text":"","code":"data(taxo) data(data) data(metadata) res_CRC_JPN <- apply_NeighborFinder(data$CRC_JPN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\") res_CRC_CHN <- apply_NeighborFinder(data$CRC_CHN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", covar = ~study_accession, meta_df = metadata$CRC_CHN, sample_col = \"secondary_sample_accession\") res_CRC_EUR <- apply_NeighborFinder(data$CRC_EUR, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", covar = ~study_accession, meta_df = metadata$CRC_EUR, sample_col = \"secondary_sample_accession\")  intersections_table(res_list = list(res_CRC_JPN, res_CRC_CHN, res_CRC_EUR), threshold = 2, taxo, col_module_id = \"msp_id\", annotation_level = \"species\", \"Escherichia coli\") #>      node1          module1    node2                 module2   datasets #> 1 msp_0005 Escherichia coli msp_0103 Clostridium_AQ innocuum n_ 1, n_ 2 #> 2 msp_0005 Escherichia coli msp_0208        Blautia_A faecis n_ 1, n_ 3 #>   intersections   mean_coef #> 1             2  0.07445512 #> 2             2 -0.12691516"},{"path":"/reference/mclr.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified central log ratio (mclr) transformation extracted from the SPRING package — mclr","title":"Modified central log ratio (mclr) transformation extracted from the SPRING package — mclr","text":"Modified central log ratio (mclr) transformation extracted SPRING package","code":""},{"path":"/reference/mclr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified central log ratio (mclr) transformation extracted from the SPRING package — mclr","text":"","code":"mclr(dat, base = exp(1), tol = 1e-16, eps = NULL, atleast = 1)"},{"path":"/reference/mclr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified central log ratio (mclr) transformation extracted from the SPRING package — mclr","text":"dat raw count data compositional data (n p) matter. base exp(1) natural log tol tolerance checking zeros eps epsilon eq (2) paper \"Yoon, Gaynanova, Müller (2019), Frontiers Genetics\". positive shifts non-zero compositions. Refer paper details. eps = absolute value minimum log ratio counts plus c. atleast default value 1. Constant c ensures nonzero values strictly positive. default 1.","code":""},{"path":"/reference/mclr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified central log ratio (mclr) transformation extracted from the SPRING package — mclr","text":"mclr returns data matrix dimension input data matrix.","code":""},{"path":"/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"metadata — metadata","title":"metadata — metadata","text":"#' @format list dataframes corresponding metadata, giving information patient. CRC_JPN dataframe Japanese patients diagnosed colorectal cancer CRC_CHN dataframe Chinese patients diagnosed colorectal cancer CRC_EUR dataframe European patients diagnosed colorectal cancer CRC_JPN_CHN_EUR dataframe patients diagnosed colorectal cancer 3 previous countries","code":""},{"path":"/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metadata — metadata","text":"","code":"metadata"},{"path":"/reference/metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"metadata — metadata","text":"object class list length 4.","code":""},{"path":"/reference/metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"metadata — metadata","text":"https://entrepot.recherche.data.gouv.fr/dataset.xhtml?persistentId=doi:10.57745/7IVO3E","code":""},{"path":"/reference/module_to_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","title":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","text":"Correspondence module ID (msp functional module) name (bacteria function)","code":""},{"path":"/reference/module_to_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","text":"","code":"module_to_node(   module,   annotation_table,   col_module_id = \"msp_name\",   annotation_level )"},{"path":"/reference/module_to_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","text":"module String. name biological object (msp functional module), can single one list annotation_table Dataframe. dataframe gathering taxonomic functional module correspondence information col_module_id String. name column module names annotation table annotation_level String. name column level studied. Examples: species, genus, level_1","code":""},{"path":"/reference/module_to_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","text":"Dictionary. name module, can single one list","code":""},{"path":"/reference/module_to_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correspondence between the module ID (msp or functional module) and its name (bacteria or function) — module_to_node","text":"","code":"df_taxo <- data.frame(   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   genus = c(\"A\", \"B\", \"C\", \"D\"),   species = c(\"A a\", \"B a\", \"C c\", \"D b\") ) # Correspondence for one specific msp module_to_node(\"msp_1\", annotation_table = df_taxo, col_module_id = \"msp_name\", annotation_level = \"species\") #> [1] \"A a\" # or for several msps module_to_node(c(\"msp_1\", \"msp_3\", \"msp_4\"), annotation_table = df_taxo, col_module_id = \"msp_name\", annotation_level = \"species\") #> [1] \"A a\" \"C c\" \"D b\" # and if one msp is repeated module_to_node(c(\"msp_1\", \"msp_1\", \"msp_2\"), annotation_table = df_taxo, col_module_id = \"msp_name\", annotation_level = \"genus\") #> [1] \"A\" \"A\" \"B\""},{"path":"/reference/new_synth_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from some empirical count dataset with a ","title":"Simulate data from some empirical count dataset with a ","text":"Simulate data empirical count dataset \"cluster-like\" structure","code":""},{"path":"/reference/new_synth_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from some empirical count dataset with a ","text":"","code":"new_synth_data(   real_data,   graph_type = \"cluster\",   must_connect = TRUE,   graph = NULL,   n = 300,   seed = 10010,   r = 50,   dens = 4,   k = 3,   verbatim = TRUE,   signed = FALSE )"},{"path":"/reference/new_synth_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from some empirical count dataset with a ","text":"real_data Matrix. Empirical count table graph_type String. Structure type conditional dependency structure. \"cluster\" kept, see EMtree package options must_connect Boolean. TRUE force output graph connected graph Boolean. Optional graph used, must rownames colnames reference features real_data n Numeric. Number samples simulate seed Numeric. Seed number data generation (rmvnorm) r Numeric. cluster structure, controls within/ratio connection probability dens Numeric. Graph density (cluster graphs) edges probability (erdös-renyi graphs) k Numeric. cluster structure, number groups verbatim Boolean. Controls verbosity signed Boolean. TRUE simulating positive negative partial correlations. Default FALSE, implies negative partial correlations","code":""},{"path":"/reference/new_synth_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from some empirical count dataset with a ","text":"List. Containing simulated discrete counts, corresponding true partial correlation matrix latent Gaussian layer model original graph structure used","code":""},{"path":"/reference/new_synth_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data from some empirical count dataset with a ","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) )  count_table <- get_count_table(abund.table = tiny_data %>% dplyr::select(-species), sample.id = colnames(tiny_data), prev.min = 0.1) #> Preprocessing step output for species prevalence>10% :  #>    -from 4 to 4 species #>    -from 50% to 50% zero values. tiny_graph <- graph_step(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", seed = 20242025) %>% suppressWarnings() sim_data <- new_synth_data(count_table$data, n = 50, graph = as.matrix(tiny_graph %>% dplyr::select(-species)), verbatim = FALSE, seed = 20242025)"},{"path":"/reference/norm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize data and filters it by prevalence level — norm_data","title":"Normalize data and filters it by prevalence level — norm_data","text":"Normalize data filters prevalence level","code":""},{"path":"/reference/norm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize data and filters it by prevalence level — norm_data","text":"","code":"norm_data(   data_with_annotation,   col_module_id,   prev_list = c(0.3),   annotation_level,   data_type = \"shotgun\" )"},{"path":"/reference/norm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize data and filters it by prevalence level — norm_data","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample col_module_id String. name column module names annotation_table prev_list Vector numeric. prevalences studied. Required format decimal: 0.20 20% prevalence annotation_level String. Annotation level aggregate taxa data_type String. Enables treatment 16S data \"16S\", default value \"shotgun\"","code":""},{"path":"/reference/norm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize data and filters it by prevalence level — norm_data","text":"List dataframes. element list corresponds normalized 'data_with_annotation', level prevalence","code":""},{"path":"/reference/norm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize data and filters it by prevalence level — norm_data","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) )  tiny_normed <- norm_data(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", prev_list = c(0.20, 0.30))"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/prev_for_selected_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","title":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","text":"Extract edges graph involving module object_of_interest set","code":""},{"path":"/reference/prev_for_selected_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","text":"","code":"prev_for_selected_nodes(   data_with_annotation,   graph_file,   col_module_id,   annotation_level,   object_of_interest = NULL )"},{"path":"/reference/prev_for_selected_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample graph_file Dataframe. object generated graph_step() function col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 object_of_interest String. name bacteria species interest key word functional module definition","code":""},{"path":"/reference/prev_for_selected_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","text":"Dataframe. dataframe edges graph involving modules corresponding object_of_interest corresponding prevalences.","code":""},{"path":"/reference/prev_for_selected_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract edges in graph involving any module in object_of_interest set — prev_for_selected_nodes","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) ) tiny_graph <- graph_step(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", seed = 20242025) %>% suppressWarnings()  tiny_truth <- prev_for_selected_nodes(tiny_data, tiny_graph, col_module_id = \"msp_name\", annotation_level = \"species\", object_of_interest = \"bacterium\")"},{"path":"/reference/res_by_filtering.html","id":null,"dir":"Reference","previous_headings":"","what":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","title":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","text":"Give results cvglm_to_coeffs_by_object() filtering top percentage","code":""},{"path":"/reference/res_by_filtering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","text":"","code":"res_by_filtering(res_glm, filtering_list)"},{"path":"/reference/res_by_filtering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","text":"res_glm Dataframe. one resulting cvglm_to_coeffs_by_object() filtering_list List numeric. filtering top percentages studied. Required format : 10 top 10%","code":""},{"path":"/reference/res_by_filtering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","text":"List dataframes. element list corresponds dataframe detected edges filtering top percentage","code":""},{"path":"/reference/res_by_filtering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Give results from cvglm_to_coeffs_by_object() for each filtering top percentage — res_by_filtering","text":"","code":"data(data) # Simple example normed_JPN <- norm_data(data$CRC_JPN, col_module_id = \"msp_id\", annotation_level = \"species\", prev_list = c(0.20, 0.25, 0.30)) neighbors_JPN <- cvglm_to_coeffs_by_object(list_dfs = normed_JPN, test_module = c(\"msp_0030\", \"msp_0345\"), seed = 20242025) filtered_neighbors_JPN <- res_by_filtering(neighbors_JPN, filtering_list = c(10, 15, 20))"},{"path":"/reference/simulate_by_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"List the simulated count tables by level of prevalence — simulate_by_prevalence","title":"List the simulated count tables by level of prevalence — simulate_by_prevalence","text":"List simulated count tables level prevalence","code":""},{"path":"/reference/simulate_by_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the simulated count tables by level of prevalence — simulate_by_prevalence","text":"","code":"simulate_by_prevalence(   data_with_annotation,   prev_list,   graph_file = NULL,   col_module_id,   annotation_level,   sample_size = 500,   seed,   verbatim = FALSE,   data_type = \"shotgun\" )"},{"path":"/reference/simulate_by_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the simulated count tables by level of prevalence — simulate_by_prevalence","text":"data_with_annotation Dataframe. abundance table merged module names. Required format: modules rows samples columns. first column must modules name (e.g. species), second module ID (e.g. msp), subsequent column sample prev_list List numeric. prevalences studied. Required format decimal: 0.20 20% prevalence. graph_file Dataframe. object generated graph_step() function col_module_id String. name column module names data_with_annotation annotation_level String. name column level studied. Examples: species, genus, level_1 sample_size Numeric. size considerated, value 500 recommended seed Numeric. seed number, ensuring reproducibility verbatim Boolean. Controls verbosity data_type String. Enables treatment 16S data \"16S\", default value \"shotgun\"","code":""},{"path":"/reference/simulate_by_prevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the simulated count tables by level of prevalence — simulate_by_prevalence","text":"List dataframes. element list corresponds level prevalence simulated abundance table","code":""},{"path":"/reference/simulate_by_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the simulated count tables by level of prevalence — simulate_by_prevalence","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) )  tiny_graph <- graph_step(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", seed = 20242025) %>% suppressWarnings()  tiny_sims <- simulate_by_prevalence(tiny_data, prev_list = c(0.20, 0.30), graph_file = tiny_graph, col_module_id = \"msp_name\", annotation_level = \"species\", sample_size = 500, seed = 20242025)"},{"path":"/reference/simulate_from_ecdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data (extracted from OneNet package) Generates synthetic count data based on empirical cumulative distribution (ecdf) of real count data — simulate_from_ecdf","title":"Simulate data (extracted from OneNet package) Generates synthetic count data based on empirical cumulative distribution (ecdf) of real count data — simulate_from_ecdf","text":"Simulate data (extracted OneNet package) Generates synthetic count data based empirical cumulative distribution (ecdf) real count data","code":""},{"path":"/reference/simulate_from_ecdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data (extracted from OneNet package) Generates synthetic count data based on empirical cumulative distribution (ecdf) of real count data — simulate_from_ecdf","text":"","code":"simulate_from_ecdf(real_data, Sigma, n, seed = 10010, verbatim = FALSE)"},{"path":"/reference/simulate_from_ecdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data (extracted from OneNet package) Generates synthetic count data based on empirical cumulative distribution (ecdf) of real count data — simulate_from_ecdf","text":"real_data Matrix. Contains real count data size n p Sigma Matrix. Covariance structure size p p n Numeric. Number samples seed Numeric. Seed number data generation verbatim Boolean. TRUE: iteration index calculation step printed ","code":""},{"path":"/reference/simulate_from_ecdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data (extracted from OneNet package) Generates synthetic count data based on empirical cumulative distribution (ecdf) of real count data — simulate_from_ecdf","text":"Matrix. vector upper triangular part .mat","code":""},{"path":"/reference/taxo.html","id":null,"dir":"Reference","previous_headings":"","what":"taxo — taxo","title":"taxo — taxo","text":"#' @format dataframe 2537 msps (rows) 4 columns: msp_id string species string genus string catalogue string indicating gut /oral","code":""},{"path":"/reference/taxo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"taxo — taxo","text":"","code":"taxo"},{"path":"/reference/taxo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"taxo — taxo","text":"object class data.frame 2537 rows 4 columns.","code":""},{"path":"/reference/taxo.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"taxo — taxo","text":"https://entrepot.recherche.data.gouv.fr/dataset.xhtml?persistentId=doi:10.57745/7IVO3E","code":""},{"path":"/reference/test_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","title":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","text":"Render table gathering precision recall rates filtering coefficient values","code":""},{"path":"/reference/test_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","text":"","code":"test_filter(df_before, df_after, prevs = NULL)"},{"path":"/reference/test_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","text":"df_before Dataframe. one true neighbors df_after Dataframe. one detected neighbors prevs List numeric. prevalences studied. Required format decimal: 0.20 20% prevalence","code":""},{"path":"/reference/test_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","text":"Dataframe. Returns precision recall rates modification","code":""},{"path":"/reference/test_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a table gathering precision and recall rates before and after filtering on coefficient values — test_filter","text":"","code":"# Dataframe with true neighbors list_true <- list(   tibble::tibble(     node1 = c(\"msp_1\", \"msp_1\", \"msp_2\", \"msp_3\"), node2 = c(\"msp_55\", \"msp_20\", \"msp_3\", \"msp_18\"),     prev1 = c(0.28, 0.28, 0.96, 0.75), prev2 = c(0.76, 0.25, 0.75, 0.60)   ),   tibble::tibble(node1 = c(\"msp_2\", \"msp_3\"), node2 = c(\"msp_3\", \"msp_18\"), prev1 = c(0.96, 0.75), prev2 = c(0.75, 0.60)) ) %>% rlang::set_names(c(\"0.20\", \"0.30\"))  # Dataframes with detected neighbors list_detected <- list(   tibble::tibble(     prev_level = c(\"0.20\", \"0.30\", \"0.30\", \"0.30\"), node1 = c(\"msp_2\", \"msp_2\", \"msp_3\", \"msp_3\"),     node2 = c(\"msp_3\", \"msp_3\", \"msp_18\", \"msp_8\"), coef = c(0.406, -0.025, 0.160, 0.005),     filtering_top = c(100, 100, 100, 100)   ),   tibble::tibble() ) %>% rlang::set_names(c(\"0.20\", \"0.30\")) list_detected2 <- list(   tibble::tibble(     prev_level = c(\"0.20\", \"0.20\"), node1 = c(\"msp_2\", \"msp_3\"),     node2 = c(\"msp_3\", \"msp_18\"), coef = c(0.160, 0.005),     filtering_top = c(100, 100)   ),   tibble::tibble() ) %>% rlang::set_names(c(\"0.20\", \"0.30\")) # Use final_step() to gather both neighbors <- final_step(list_true, list_detected, robustness_step = FALSE) neighbors2 <- final_step(list_true, list_detected2, robustness_step = FALSE) %>% dplyr::mutate(filtering_top = 10) # Calculate scores scores <- test_filter(neighbors, neighbors2)"},{"path":"/reference/truth_by_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Give true neighbors by level of prevalence — truth_by_prevalence","title":"Give true neighbors by level of prevalence — truth_by_prevalence","text":"Give true neighbors level prevalence","code":""},{"path":"/reference/truth_by_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give true neighbors by level of prevalence — truth_by_prevalence","text":"","code":"truth_by_prevalence(edge_table, prev_list)"},{"path":"/reference/truth_by_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give true neighbors by level of prevalence — truth_by_prevalence","text":"edge_table Dataframe. result prev_for_selected_nodes() prev_list List numeric. prevalences studied. Required format decimal: 0.20 20% prevalence","code":""},{"path":"/reference/truth_by_prevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give true neighbors by level of prevalence — truth_by_prevalence","text":"List dataframes. element list corresponds dataframe true edges level prevalence","code":""},{"path":"/reference/truth_by_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Give true neighbors by level of prevalence — truth_by_prevalence","text":"","code":"tiny_data <- data.frame(   species = c(\"One bacteria\", \"One bacterium L\", \"One bacterium G\", \"Two bact\"),   msp_name = c(\"msp_1\", \"msp_2\", \"msp_3\", \"msp_4\"),   SAMPLE1 = c(0, 1.328425e-06, 0, 1.527688e-07),   SAMPLE2 = c(1.251707e-07, 1.251707e-07, 3.985320e-07, 0),   SAMPLE3 = c(0, 0, 4.926046e-09, 5.626392e-06),   SAMPLE4 = c(0, 0, 2.98320e-05, 0) )  tiny_graph <- graph_step(tiny_data, col_module_id = \"msp_name\", annotation_level = \"species\", seed = 20242025) %>% suppressWarnings()  tiny_truth <- prev_for_selected_nodes(tiny_data, tiny_graph, col_module_id = \"msp_name\", annotation_level = \"species\", object_of_interest = \"bacterium\")  tiny_true_edges <- truth_by_prevalence(tiny_truth, c(0.20, 0.30)) #> Defining and saving true neighbors..."},{"path":"/reference/visualize_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Display network after applying NeighborFinder — visualize_network","title":"Display network after applying NeighborFinder — visualize_network","text":"Display network applying NeighborFinder","code":""},{"path":"/reference/visualize_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display network after applying NeighborFinder — visualize_network","text":"","code":"visualize_network(   res_NeighborFinder,   annotation_table,   col_module_id,   annotation_level,   object_of_interest,   annotation_option = FALSE,   node_size = 12,   label_size = 4,   object_color = \"cadetblue2\",   seed = NULL )"},{"path":"/reference/visualize_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display network after applying NeighborFinder — visualize_network","text":"res_NeighborFinder Dataframe. result apply_NeighborFinder() annotation_table Dataframe. dataframe gathering taxonomic functional module correspondence information col_module_id String. name column module names annotation_table annotation_level String. name column level studied. Examples: species, genus, level_1 object_of_interest String. name bacteria species interest key word functional module definition annotation_option Boolean. Default value False. True: labels nodes become module names instead module IDs node_size Numeric. parameter adjust size nodes label_size Numeric. parameter adjust size labels object_color String. name color differentiate nodes corresponding 'object_of_interest' module IDs seed Numeric. seed number, ensuring reproducibility","code":""},{"path":"/reference/visualize_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display network after applying NeighborFinder — visualize_network","text":"Network. Visualization NeighborFinder results","code":""},{"path":"/reference/visualize_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display network after applying NeighborFinder — visualize_network","text":"","code":"data(taxo) data(data) res_CRC_JPN <- apply_NeighborFinder(data$CRC_JPN, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\") visualize_network(res_CRC_JPN, taxo, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", label_size = 5)  # #With species names instead of msp names visualize_network(res_CRC_JPN, taxo, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", label_size = 5, annotation_option = TRUE, seed = 2)  # #With esthetic changes visualize_network(res_CRC_JPN, taxo, object_of_interest = \"Escherichia coli\", col_module_id = \"msp_id\", annotation_level = \"species\", annotation_option = TRUE, node_size = 15, label_size = 6, object_color = \"orange\", seed = 2)"}]
